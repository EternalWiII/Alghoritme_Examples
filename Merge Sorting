#include <iostream>
#include <vector>

template <typename T>
void print_vector(std::vector<T>& vec) {
	typename std::vector<T>::iterator it = vec.begin();

	for (it; it != vec.end(); it++)
	{
		std::cout << *it << " ";
	}
	std::cout << std::endl;
}

template <typename T>
void merge(std::vector <T>& vec, std::vector<T>& vec1, std::vector<T>& vec2) {
	typename std::vector<T>::size_type size1 = vec1.size();
	typename std::vector<T>::size_type size2 = vec2.size();
	size_t p1 = 0;
	size_t p2 = 0;

	/*
		while (p1 < siz1 && p2 < siz2) {
          if (v1.at(p1) < v2.at(p2))
              vec.push_back(v1.at(p1++));
          else
              vec.push_back(v2.at(p2++));
      }

	  Неопределенное поведение, или мне так показалось
	  При выполнении vec.push_back(vec1.at(p1++)) при p1 = 0
	  Выведеться 0 елемент вестора vec1, а затем p1 увеличиться на 1
	*/

	while (p1 < size1 && p2 < size2) {
		if (vec1.at(p1) < vec2.at(p2)) {
			vec.push_back(vec1.at(p1));
			p1++;
		}
		else {
			vec.push_back(vec2.at(p2));
			p2++;
		}
	}

	while (p1 < size1) {
		vec.push_back(vec1.at(p1));
		p1++;
	}

	while (p2 < size2) {
		vec.push_back(vec2.at(p2));
		p2++;
	}
}

template<typename T>
void merge_sort(std::vector<T>& vec) {
	if (vec.size() <= 1) {
		return;
	}
	
	typename std::vector<T>::iterator iter = vec.begin() + vec.size() / 2;
	std::vector<T> vec1(vec.begin(), iter);
	std::vector<T> vec2(iter, vec.end());

	merge_sort(vec1);
	merge_sort(vec2);

	vec.clear();
	merge(vec,vec1, vec2);
}

int main() {
	std::vector<int> vec = { 43, 5, 123, 94, 359, -23, 2, -1 };

	print_vector(vec);
	merge_sort(vec);
	print_vector(vec);
}
