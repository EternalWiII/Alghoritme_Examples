#include <iostream>
#include <vector>

/*
	Реализация невозрастающей приамиды 
*/

template <typename T>
class Heap {
private:
	std::vector<T> heap;
	int heap_size;
public:
	Heap(std::vector<T>& heap): heap(heap), heap_size(heap.size()) {

	}

	int Left(int i) {
		return 2 * i + 1;
	}

	int Right(int i) {
		return 2 * i + 2;
	}

	int Parent(int i) {
		return i / 2;
	}

	void Max_Heapify(int i) {
		int left = Left(i);
		int right = Right(i);
		int largest = i;

		if (left < this->heap_size && heap[left] > heap[i]) {
			largest = left;
		}

		if (right < this->heap_size && heap[right] > heap[largest]) {
			largest = right;
		}

		if (largest != i) {
			std::swap(heap[i], heap[largest]);
			Max_Heapify(largest);
		}
	}

	void Build_Heap() {

		/*
		Разница???

		for (int i = 0; i < this->heap_size/2; i++)
		{
			Max_Heapify(i);
		}*/

		for (int i = this->heap_size / 2 ; i >= 0; i--) {
			Max_Heapify(i);
		}
	}

	void Print_Heap() {
		for (typename std::vector<T>::size_type i = 0; i < heap.size(); i++)
		{
			std::cout << heap[i] << " ";
		}
		std::cout << std::endl;
	}

	void Heap_Sort() {
		Build_Heap();
		for (size_t i = this->heap_size - 1; i>0; i--)
		{
			std::swap(heap[0], heap[i]);
			heap_size = heap_size - 1;
			Max_Heapify(0);
		}
	}
};

int main() {

	std::vector<int> v = {1, 7, 43, 23, 15, 5, 6, 11};
	Heap<int> h(v);
	h.Heap_Sort();
	h.Print_Heap();
}
