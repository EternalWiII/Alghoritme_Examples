#include <iostream>
#include <vector>

template <typename T>
class Heap {
private:
	size_t heap_size;
	std::vector<T> heap;
public:
	Heap(std::vector<T> & heap);
	size_t Right(size_t i);
	size_t Left(size_t i);
	void max_heapify(size_t i);
	void build_heap();
	void heap_sort();
	void print_heap();
};

template<typename T>
Heap<T>::Heap(std::vector<T>& heap) :
	heap(heap), heap_size(heap.size())
{
}

template<typename T>
size_t Heap<T>::Right(size_t i)
{
	return size_t(2 * i + 2);
}

template<typename T>
size_t Heap<T>::Left(size_t i)
{
	return size_t(2 * i + 1);
}

template<typename T>
void Heap<T>::max_heapify(size_t i)
{
	size_t left = Left(i);
	size_t right = Right(i);
	size_t largest = i;

	if (left < this->heap_size && heap[left] > heap[i]) {
		largest = left;
	}

	if (right < this->heap_size && heap[right] > heap[largest]) {
		largest = right;
	}

	if (largest != i) {
		std::swap(heap[i], heap[largest]);
		max_heapify(size_t(largest));
	}
}

template<typename T>
void Heap<T>::build_heap()
{
	for (unsigned int i = this->heap_size / 2; i >= 0; i--)
	{
		max_heapify(i);
	}
}

template<typename T>
void Heap<T>::heap_sort()
{
	build_heap();
	for (size_t i = heap_size - 1; i > 0; i--)
	{
		std::swap(heap[0], heap[i]);
		heap_size--;
		max_heapify(0);
	}
}

template<typename T>
void Heap<T>::print_heap()
{
	for (size_t i = 0; i < heap.size(); i++)
	{
		std::cout << heap[i] << " ";
	}
}



int main() {
	std::vector<int> v = { 2, 5, 7, 1, 3, 12, 33, 24 };
	Heap<int> h(v);
	h.heap_sort();
	h.print_heap();
}
